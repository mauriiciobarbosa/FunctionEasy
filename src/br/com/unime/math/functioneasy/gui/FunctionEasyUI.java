/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.unime.math.functioneasy.gui;

import static br.com.unime.math.functioneasy.util.PropertiesBR.*;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

import expr.SyntaxException;
import br.com.unime.math.functioneasy.model.Coordinate;
import br.com.unime.math.functioneasy.util.CoordinateGenerator;
import br.com.unime.math.functioneasy.util.GraphGenerator;
import br.com.unime.math.functioneasy.util.NumberUtils;

/**
 *
 * @author Mauricio Barbosa
 */
public class FunctionEasyUI extends JFrame {
    
    private static String APP_PATH;
    private static final String IMAGES_FOLDER = "graphs";
    private static final int WIDTH = 350;
    private static final int HEIGHT = 350;
    
    private GraphGenerator graphGenerator;
    private CoordinateGenerator coordinateGenerator;
    /**
     * Creates new form FunctionEasyUI
     */
    public FunctionEasyUI() {
    	coordinateGenerator = new CoordinateGenerator();
        try {
            APP_PATH = new File(".").getCanonicalPath();
        } catch (IOException ex) {
            Logger.getLogger(FunctionEasyUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        graphImage = new javax.swing.JLabel();
        inputEquation = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        inputXMin = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        inputXMax = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 372, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );

        graphImage.setIcon(new javax.swing.ImageIcon(APP_PATH + File.separator + "graph.png"));

        jLabel1.setText("F(X) =");
        jLabel2.setText("X(min) =");
        jLabel3.setText("X(max) =");
        jButton1.setText("Calcular");
        
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateGraph(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(graphImage, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputXMin, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputXMax, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputEquation)))
                        .addGap(27, 27, 27)
                        .addComponent(jButton1)
                        .addGap(37, 37, 37)))
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inputEquation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(inputXMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(inputXMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(graphImage)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void calculateGraph(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    	String equation = inputEquation.getText().trim().toLowerCase();
    	String xMin = inputXMin.getText().trim().toLowerCase();
    	String xMax = inputXMax.getText().trim().toLowerCase();
    	
    	if (validateInput(equation, xMin, xMax)) {
    		Map<Integer, List<Coordinate>> coordinates;
			try {
				coordinates = coordinateGenerator.generate(equation, xMin, xMax);
				graphGenerator = new GraphGenerator(GRAPH_NAME, coordinates);
				ImageIcon newGraph = graphGenerator.generateGraphOnImage(getImagePath(), graphImage.getWidth(), graphImage.getHeight());
				graphImage.setIcon(newGraph);
				pack();
			} catch (SyntaxException e1) {
				JOptionPane.showMessageDialog(this, "EQUAÇÃO INVÁLIDA!", LABEL_TITLE_ERROR, JOptionPane.ERROR_MESSAGE);
			} catch (IOException e) {
				java.util.logging.Logger.getLogger(FunctionEasyUI.class.getName()).log(java.util.logging.Level.SEVERE, null, e);
			}
    	}
    	
    }//GEN-LAST:event_jButton1ActionPerformed

    private boolean validateInput(String equation, String xMin, String xMax) {

    	if (equation.isEmpty()) {
    		JOptionPane.showMessageDialog(this, "FAVOR INFORMAR EQUAÇÃO!", LABEL_TITLE_ERROR, JOptionPane.ERROR_MESSAGE);
    		return false;
    	}

    	if (xMin.isEmpty()) {
    		JOptionPane.showMessageDialog(this, "FAVOR INFORMAR LIMITE INFERIOR DE X!", LABEL_TITLE_ERROR, JOptionPane.ERROR_MESSAGE);
    		return false;
    	}

    	if (xMax.isEmpty()) {
    		JOptionPane.showMessageDialog(this, "FAVOR INFORMAR LIMITE SUPERIOR DE X!", LABEL_TITLE_ERROR, JOptionPane.ERROR_MESSAGE);
    		return false;
    	}
    	
    	String[] listEquation = equation.split(SEPARATOR);
    	String[] listXMin = xMin.split(SEPARATOR);
    	String[] listXMax = xMax.split(SEPARATOR);
    	
    	if (listEquation.length != listXMin.length) {
    		JOptionPane.showMessageDialog(this, "QUANTIDADE DE LIMITES INFERIORES INVÁLIDA!", LABEL_TITLE_ERROR, JOptionPane.ERROR_MESSAGE);
    		return false;
    	}
    	
    	if (listEquation.length != listXMax.length) {
    		JOptionPane.showMessageDialog(this, "QUANTIDADE DE LIMITES SUPERIORES INVÁLIDA!", LABEL_TITLE_ERROR, JOptionPane.ERROR_MESSAGE);
    		return false;
    	}
    	
    	for (String valueXMin : listXMin) {
			if (!NumberUtils.isNumber(valueXMin)) {
				JOptionPane.showMessageDialog(this, "LIMITE INFERIOR DE X INVÁLIDO!", LABEL_TITLE_ERROR, JOptionPane.ERROR_MESSAGE);
	    		return false;
			}
		}
    	
    	for (String valueXMax : listXMax) {
			if (!NumberUtils.isNumber(valueXMax)) {
				JOptionPane.showMessageDialog(this, "LIMITE SUPERIOR DE X INVÁLIDO!", LABEL_TITLE_ERROR, JOptionPane.ERROR_MESSAGE);
	    		return false;
			}
		}
    	
		return true;
	}

	private String getImagePath() {
        return APP_PATH + File.separator + IMAGES_FOLDER + File.separator + "graph_" + System.currentTimeMillis() + ".png";
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FunctionEasyUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FunctionEasyUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FunctionEasyUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FunctionEasyUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frame = new FunctionEasyUI();
                frame.setTitle(LABEL_APP_NAME + " " + LABEL_APP_VERSION);
                frame.setResizable(false);
                frame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel graphImage;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField inputEquation;
    private javax.swing.JTextField inputXMin;
    private javax.swing.JTextField inputXMax;
    // End of variables declaration//GEN-END:variables

}
